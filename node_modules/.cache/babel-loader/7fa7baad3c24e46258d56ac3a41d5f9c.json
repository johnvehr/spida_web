{"ast":null,"code":"import _pt from \"prop-types\";\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport React from 'react';\nimport { localPoint } from '@vx/event';\nimport { composeMatrices, inverseMatrix, applyMatrixToPoint, applyInverseMatrixToPoint, translateMatrix, identityMatrix, scaleMatrix } from './util/matrix';\n\nvar Zoom =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(Zoom, _React$Component);\n\n  function Zoom() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n\n    _defineProperty(_assertThisInitialized(_this), \"containerRef\", null);\n\n    _defineProperty(_assertThisInitialized(_this), \"startPoint\", undefined);\n\n    _defineProperty(_assertThisInitialized(_this), \"startTranslate\", undefined);\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      initialTransformMatrix: _this.props.transformMatrix,\n      transformMatrix: _this.props.transformMatrix,\n      isDragging: false\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"applyToPoint\", function (_ref) {\n      var x = _ref.x,\n          y = _ref.y;\n      var transformMatrix = _this.state.transformMatrix;\n      return applyMatrixToPoint(transformMatrix, {\n        x: x,\n        y: y\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"applyInverseToPoint\", function (_ref2) {\n      var x = _ref2.x,\n          y = _ref2.y;\n      var transformMatrix = _this.state.transformMatrix;\n      return applyInverseMatrixToPoint(transformMatrix, {\n        x: x,\n        y: y\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"reset\", function () {\n      var initialTransformMatrix = _this.state.initialTransformMatrix;\n\n      _this.setTransformMatrix(initialTransformMatrix);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"scale\", function (_ref3) {\n      var scaleX = _ref3.scaleX,\n          maybeScaleY = _ref3.scaleY,\n          point = _ref3.point;\n      var scaleY = maybeScaleY || scaleX;\n      var transformMatrix = _this.state.transformMatrix;\n      var _this$props = _this.props,\n          width = _this$props.width,\n          height = _this$props.height;\n      var cleanPoint = point || {\n        x: width / 2,\n        y: height / 2\n      };\n      var translate = applyInverseMatrixToPoint(transformMatrix, cleanPoint);\n      var nextMatrix = composeMatrices(transformMatrix, translateMatrix(translate.x, translate.y), scaleMatrix(scaleX, scaleY), translateMatrix(-translate.x, -translate.y));\n\n      _this.setTransformMatrix(nextMatrix);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"translate\", function (_ref4) {\n      var translateX = _ref4.translateX,\n          translateY = _ref4.translateY;\n      var transformMatrix = _this.state.transformMatrix;\n      var nextMatrix = composeMatrices(transformMatrix, translateMatrix(translateX, translateY));\n\n      _this.setTransformMatrix(nextMatrix);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"translateTo\", function (_ref5) {\n      var x = _ref5.x,\n          y = _ref5.y;\n      var transformMatrix = _this.state.transformMatrix;\n      var point = applyInverseMatrixToPoint(transformMatrix, {\n        x: x,\n        y: y\n      });\n\n      _this.setTranslate({\n        translateX: point.x,\n        translateY: point.y\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"setTranslate\", function (_ref6) {\n      var translateX = _ref6.translateX,\n          translateY = _ref6.translateY;\n      var transformMatrix = _this.state.transformMatrix;\n\n      var nextMatrix = _extends({}, transformMatrix, {\n        translateX: translateX,\n        translateY: translateY\n      });\n\n      _this.setTransformMatrix(nextMatrix);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"setTransformMatrix\", function (transformMatrix) {\n      _this.setState(function (prevState) {\n        return {\n          transformMatrix: _this.constrain(transformMatrix, prevState.transformMatrix)\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"invert\", function () {\n      return inverseMatrix(_this.state.transformMatrix);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"toStringInvert\", function () {\n      var _this$invert = _this.invert(),\n          translateX = _this$invert.translateX,\n          translateY = _this$invert.translateY,\n          scaleX = _this$invert.scaleX,\n          scaleY = _this$invert.scaleY,\n          skewX = _this$invert.skewX,\n          skewY = _this$invert.skewY;\n\n      return \"matrix(\" + scaleX + \", \" + skewY + \", \" + skewX + \", \" + scaleY + \", \" + translateX + \", \" + translateY + \")\";\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"constrain\", _this.props.constrain || function (transformMatrix, prevTransformMatrix) {\n      var _this$props2 = _this.props,\n          scaleXMin = _this$props2.scaleXMin,\n          scaleXMax = _this$props2.scaleXMax,\n          scaleYMin = _this$props2.scaleYMin,\n          scaleYMax = _this$props2.scaleYMax;\n      var scaleX = transformMatrix.scaleX,\n          scaleY = transformMatrix.scaleY;\n      var shouldConstrainScaleX = scaleX > scaleXMax || scaleX < scaleXMin;\n      var shouldConstrainScaleY = scaleY > scaleYMax || scaleY < scaleYMin;\n\n      if (shouldConstrainScaleX || shouldConstrainScaleY) {\n        return prevTransformMatrix;\n      }\n\n      return transformMatrix;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"dragStart\", function (event) {\n      var transformMatrix = _this.state.transformMatrix;\n      var translateX = transformMatrix.translateX,\n          translateY = transformMatrix.translateY;\n      _this.startPoint = localPoint(event) || undefined;\n      _this.startTranslate = {\n        translateX: translateX,\n        translateY: translateY\n      };\n\n      _this.setState({\n        isDragging: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"dragMove\", function (event) {\n      if (!_this.state.isDragging || !_this.startPoint || !_this.startTranslate) return;\n      var currentPoint = localPoint(event);\n      var dx = currentPoint ? -(_this.startPoint.x - currentPoint.x) : -_this.startPoint.x;\n      var dy = currentPoint ? -(_this.startPoint.y - currentPoint.y) : -_this.startPoint.y;\n\n      _this.setTranslate({\n        translateX: _this.startTranslate.translateX + dx,\n        translateY: _this.startTranslate.translateY + dy\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"dragEnd\", function () {\n      _this.startPoint = undefined;\n      _this.startTranslate = undefined;\n\n      _this.setState({\n        isDragging: false\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleWheel\", function (event) {\n      var _this$props3 = _this.props,\n          passive = _this$props3.passive,\n          wheelDelta = _this$props3.wheelDelta;\n      if (!passive) event.preventDefault();\n      var point = localPoint(event) || undefined;\n\n      var _ref7 = wheelDelta(event),\n          scaleX = _ref7.scaleX,\n          scaleY = _ref7.scaleY;\n\n      _this.scale({\n        scaleX: scaleX,\n        scaleY: scaleY,\n        point: point\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"toString\", function () {\n      var transformMatrix = _this.state.transformMatrix;\n      var translateX = transformMatrix.translateX,\n          translateY = transformMatrix.translateY,\n          scaleX = transformMatrix.scaleX,\n          scaleY = transformMatrix.scaleY,\n          skewX = transformMatrix.skewX,\n          skewY = transformMatrix.skewY;\n      return \"matrix(\" + scaleX + \", \" + skewY + \", \" + skewX + \", \" + scaleY + \", \" + translateX + \", \" + translateY + \")\";\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"center\", function () {\n      var _this$props4 = _this.props,\n          width = _this$props4.width,\n          height = _this$props4.height;\n      var center = {\n        x: width / 2,\n        y: height / 2\n      };\n\n      var inverseCentroid = _this.applyInverseToPoint(center);\n\n      _this.translate({\n        translateX: inverseCentroid.x - center.x,\n        translateY: inverseCentroid.y - center.y\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"clear\", function () {\n      _this.setTransformMatrix(identityMatrix());\n    });\n\n    return _this;\n  }\n\n  var _proto = Zoom.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    var passive = this.props.passive;\n\n    if (this.containerRef && !passive) {\n      this.containerRef.addEventListener('wheel', this.handleWheel, {\n        passive: false\n      });\n    }\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    var passive = this.props.passive;\n\n    if (this.containerRef && !passive) {\n      this.containerRef.removeEventListener('wheel', this.handleWheel);\n    }\n  };\n\n  _proto.render = function render() {\n    var _this2 = this;\n\n    var _this$props5 = this.props,\n        passive = _this$props5.passive,\n        children = _this$props5.children,\n        style = _this$props5.style,\n        className = _this$props5.className;\n\n    var zoom = _extends({}, this.state, {\n      center: this.center,\n      clear: this.clear,\n      scale: this.scale,\n      translate: this.translate,\n      translateTo: this.translateTo,\n      setTranslate: this.setTranslate,\n      setTransformMatrix: this.setTransformMatrix,\n      reset: this.reset,\n      handleWheel: this.handleWheel,\n      dragEnd: this.dragEnd,\n      dragMove: this.dragMove,\n      dragStart: this.dragStart,\n      toString: this.toString,\n      invert: this.invert,\n      toStringInvert: this.toStringInvert,\n      applyToPoint: this.applyToPoint,\n      applyInverseToPoint: this.applyInverseToPoint\n    });\n\n    if (!passive) {\n      return React.createElement(\"div\", {\n        ref: function ref(c) {\n          _this2.containerRef = c;\n        },\n        style: style,\n        className: className\n      }, children(zoom));\n    }\n\n    return children(zoom);\n  };\n\n  return Zoom;\n}(React.Component);\n\n_defineProperty(Zoom, \"propTypes\", {\n  width: _pt.number.isRequired,\n  height: _pt.number.isRequired,\n  wheelDelta: _pt.func,\n  scaleXMin: _pt.number,\n  scaleXMax: _pt.number,\n  scaleYMin: _pt.number,\n  scaleYMax: _pt.number,\n  constrain: _pt.func,\n  transformMatrix: _pt.any,\n  passive: _pt.bool,\n  style: _pt.any,\n  className: _pt.string,\n  children: _pt.func.isRequired\n});\n\n_defineProperty(Zoom, \"defaultProps\", {\n  passive: false,\n  scaleXMin: 0,\n  scaleXMax: Infinity,\n  scaleYMin: 0,\n  scaleYMax: Infinity,\n  transformMatrix: {\n    scaleX: 1,\n    scaleY: 1,\n    translateX: 0,\n    translateY: 0,\n    skewX: 0,\n    skewY: 0\n  },\n  wheelDelta: function wheelDelta(event) {\n    return -event.deltaY > 0 ? {\n      scaleX: 1.1,\n      scaleY: 1.1\n    } : {\n      scaleX: 0.9,\n      scaleY: 0.9\n    };\n  },\n  style: undefined,\n  className: undefined\n});\n\nexport default Zoom;","map":null,"metadata":{},"sourceType":"module"}