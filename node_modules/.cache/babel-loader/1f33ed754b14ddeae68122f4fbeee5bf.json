{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport { Group } from '@vx/group';\nimport { stack as d3stack } from 'd3-shape';\nimport stackOrder from '../util/stackOrder';\nimport stackOffset from '../util/stackOffset';\nimport objHasMethod from '../util/objHasMethod';\nimport Bar from './Bar';\nBarStack.propTypes = {\n  data: PropTypes.array.isRequired,\n  x: PropTypes.func.isRequired,\n  xScale: PropTypes.func.isRequired,\n  yScale: PropTypes.func.isRequired,\n  color: PropTypes.func.isRequired,\n  keys: PropTypes.array.isRequired,\n  className: PropTypes.string,\n  top: PropTypes.number,\n  left: PropTypes.number,\n  children: PropTypes.func,\n  y0: PropTypes.func,\n  y1: PropTypes.func,\n  order: PropTypes.oneOfType([PropTypes.func, PropTypes.array, PropTypes.string]),\n  offset: PropTypes.oneOfType([PropTypes.func, PropTypes.array, PropTypes.string]),\n  value: PropTypes.oneOfType([PropTypes.func, PropTypes.number])\n};\nexport default function BarStack(_ref) {\n  var data = _ref.data,\n      className = _ref.className,\n      top = _ref.top,\n      left = _ref.left,\n      x = _ref.x,\n      _ref$y = _ref.y0,\n      y0 = _ref$y === void 0 ? function (d) {\n    return d[0];\n  } : _ref$y,\n      _ref$y2 = _ref.y1,\n      y1 = _ref$y2 === void 0 ? function (d) {\n    return d[1];\n  } : _ref$y2,\n      xScale = _ref.xScale,\n      yScale = _ref.yScale,\n      color = _ref.color,\n      keys = _ref.keys,\n      value = _ref.value,\n      order = _ref.order,\n      offset = _ref.offset,\n      children = _ref.children,\n      restProps = _objectWithoutPropertiesLoose(_ref, [\"data\", \"className\", \"top\", \"left\", \"x\", \"y0\", \"y1\", \"xScale\", \"yScale\", \"color\", \"keys\", \"value\", \"order\", \"offset\", \"children\"]);\n\n  var stack = d3stack();\n  if (keys) stack.keys(keys);\n  if (value) stack.value(value);\n  if (order) stack.order(stackOrder(order));\n  if (offset) stack.offset(stackOffset(offset));\n  var stacks = stack(data);\n  var xRange = xScale.range();\n  var xDomain = xScale.domain();\n  var barWidth = objHasMethod(xScale, 'bandwidth') ? xScale.bandwidth() : Math.abs(xRange[xRange.length - 1] - xRange[0]) / xDomain.length;\n  var barStacks = stacks.map(function (barStack, i) {\n    var key = barStack.key;\n    return {\n      index: i,\n      key: key,\n      bars: barStack.map(function (bar, j) {\n        var barHeight = yScale(y0(bar)) - yScale(y1(bar));\n        var barY = yScale(y1(bar));\n        var barX = objHasMethod(xScale, 'bandwidth') ? xScale(x(bar.data)) : Math.max(xScale(x(bar.data)) - barWidth / 2);\n        return {\n          bar: bar,\n          key: key,\n          index: j,\n          height: barHeight,\n          width: barWidth,\n          x: barX,\n          y: barY,\n          color: color(barStack.key, j)\n        };\n      })\n    };\n  });\n  if (children) return children(barStacks);\n  return React.createElement(Group, {\n    className: cx('vx-bar-stack', className),\n    top: top,\n    left: left\n  }, barStacks.map(function (barStack) {\n    return barStack.bars.map(function (bar) {\n      return React.createElement(Bar, _extends({\n        key: \"bar-stack-\" + barStack.index + \"-\" + bar.index,\n        x: bar.x,\n        y: bar.y,\n        height: bar.height,\n        width: bar.width,\n        fill: bar.color\n      }, restProps));\n    });\n  }));\n}","map":null,"metadata":{},"sourceType":"module"}