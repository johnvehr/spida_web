{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React from 'react';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport { arc as d3Arc } from 'd3-shape';\nArc.propTypes = {\n  className: PropTypes.string,\n  data: PropTypes.any,\n  children: PropTypes.func,\n  innerRef: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n  centroid: PropTypes.oneOfType([PropTypes.func, PropTypes.number]),\n  innerRadius: PropTypes.oneOfType([PropTypes.func, PropTypes.number]),\n  outerRadius: PropTypes.oneOfType([PropTypes.func, PropTypes.number]),\n  cornerRadius: PropTypes.oneOfType([PropTypes.func, PropTypes.number]),\n  startAngle: PropTypes.oneOfType([PropTypes.func, PropTypes.number]),\n  endAngle: PropTypes.oneOfType([PropTypes.func, PropTypes.number]),\n  padAngle: PropTypes.oneOfType([PropTypes.func, PropTypes.number]),\n  padRadius: PropTypes.oneOfType([PropTypes.func, PropTypes.number])\n};\nexport default function Arc(_ref) {\n  var className = _ref.className,\n      data = _ref.data,\n      centroid = _ref.centroid,\n      innerRadius = _ref.innerRadius,\n      outerRadius = _ref.outerRadius,\n      cornerRadius = _ref.cornerRadius,\n      startAngle = _ref.startAngle,\n      endAngle = _ref.endAngle,\n      padAngle = _ref.padAngle,\n      padRadius = _ref.padRadius,\n      children = _ref.children,\n      innerRef = _ref.innerRef,\n      restProps = _objectWithoutPropertiesLoose(_ref, [\"className\", \"data\", \"centroid\", \"innerRadius\", \"outerRadius\", \"cornerRadius\", \"startAngle\", \"endAngle\", \"padAngle\", \"padRadius\", \"children\", \"innerRef\"]);\n\n  var arc = d3Arc();\n  if (centroid) arc.centroid(centroid);\n  if (innerRadius !== undefined) arc.innerRadius(innerRadius);\n  if (outerRadius !== undefined) arc.outerRadius(outerRadius);\n  if (cornerRadius !== undefined) arc.cornerRadius(cornerRadius);\n  if (startAngle !== undefined) arc.startAngle(startAngle);\n  if (endAngle !== undefined) arc.endAngle(endAngle);\n  if (padAngle !== undefined) arc.padAngle(padAngle);\n  if (padRadius !== undefined) arc.padRadius(padRadius);\n  if (children) return children({\n    path: arc\n  });\n  return React.createElement(\"path\", _extends({\n    ref: innerRef,\n    className: cx('vx-arc', className),\n    d: arc(data)\n  }, restProps));\n}","map":null,"metadata":{},"sourceType":"module"}