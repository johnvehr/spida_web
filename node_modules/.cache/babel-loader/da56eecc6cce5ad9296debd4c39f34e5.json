{"ast":null,"code":"export function identityMatrix() {\n  return {\n    scaleX: 1,\n    scaleY: 1,\n    translateX: 0,\n    translateY: 0,\n    skewX: 0,\n    skewY: 0\n  };\n}\nexport function createMatrix(_ref) {\n  var _ref$scaleX = _ref.scaleX,\n      scaleX = _ref$scaleX === void 0 ? 1 : _ref$scaleX,\n      _ref$scaleY = _ref.scaleY,\n      scaleY = _ref$scaleY === void 0 ? 1 : _ref$scaleY,\n      _ref$translateX = _ref.translateX,\n      translateX = _ref$translateX === void 0 ? 0 : _ref$translateX,\n      _ref$translateY = _ref.translateY,\n      translateY = _ref$translateY === void 0 ? 0 : _ref$translateY,\n      _ref$skewX = _ref.skewX,\n      skewX = _ref$skewX === void 0 ? 0 : _ref$skewX,\n      _ref$skewY = _ref.skewY,\n      skewY = _ref$skewY === void 0 ? 0 : _ref$skewY;\n  return {\n    scaleX: scaleX,\n    scaleY: scaleY,\n    translateX: translateX,\n    translateY: translateY,\n    skewX: skewX,\n    skewY: skewY\n  };\n}\nexport function inverseMatrix(_ref2) {\n  var scaleX = _ref2.scaleX,\n      scaleY = _ref2.scaleY,\n      translateX = _ref2.translateX,\n      translateY = _ref2.translateY,\n      skewX = _ref2.skewX,\n      skewY = _ref2.skewY;\n  var denominator = scaleX * scaleY - skewY * skewX;\n  return {\n    scaleX: scaleY / denominator,\n    scaleY: scaleX / denominator,\n    translateX: (scaleY * translateX - skewX * translateY) / -denominator,\n    translateY: (skewY * translateX - scaleX * translateY) / denominator,\n    skewX: skewX / -denominator,\n    skewY: skewY / -denominator\n  };\n}\nexport function applyMatrixToPoint(matrix, _ref3) {\n  var x = _ref3.x,\n      y = _ref3.y;\n  return {\n    x: matrix.scaleX * x + matrix.skewX * y + matrix.translateX,\n    y: matrix.skewY * x + matrix.scaleY * y + matrix.translateY\n  };\n}\nexport function applyInverseMatrixToPoint(matrix, _ref4) {\n  var x = _ref4.x,\n      y = _ref4.y;\n  return applyMatrixToPoint(inverseMatrix(matrix), {\n    x: x,\n    y: y\n  });\n}\nexport function scaleMatrix(scaleX, maybeScaleY) {\n  if (maybeScaleY === void 0) {\n    maybeScaleY = undefined;\n  }\n\n  var scaleY = maybeScaleY || scaleX;\n  return createMatrix({\n    scaleX: scaleX,\n    scaleY: scaleY\n  });\n}\nexport function translateMatrix(translateX, translateY) {\n  return createMatrix({\n    translateX: translateX,\n    translateY: translateY\n  });\n}\nexport function multiplyMatrices(matrix1, matrix2) {\n  return {\n    scaleX: matrix1.scaleX * matrix2.scaleX + matrix1.skewX * matrix2.skewY,\n    scaleY: matrix1.skewY * matrix2.skewX + matrix1.scaleY * matrix2.scaleY,\n    translateX: matrix1.scaleX * matrix2.translateX + matrix1.skewX * matrix2.translateY + matrix1.translateX,\n    translateY: matrix1.skewY * matrix2.translateX + matrix1.scaleY * matrix2.translateY + matrix1.translateY,\n    skewX: matrix1.scaleX * matrix2.skewX + matrix1.skewX * matrix2.scaleY,\n    skewY: matrix1.skewY * matrix2.scaleX + matrix1.scaleY * matrix2.skewY\n  };\n}\nexport function composeMatrices() {\n  for (var _len = arguments.length, matrices = new Array(_len), _key = 0; _key < _len; _key++) {\n    matrices[_key] = arguments[_key];\n  }\n\n  switch (matrices.length) {\n    case 0:\n      throw new Error('composeMatrices() requires arguments: was called with no args');\n\n    case 1:\n      return matrices[0];\n\n    case 2:\n      return multiplyMatrices(matrices[0], matrices[1]);\n\n    default:\n      {\n        var matrix1 = matrices[0],\n            matrix2 = matrices[1],\n            restMatrices = matrices.slice(2);\n        var matrix = multiplyMatrices(matrix1, matrix2);\n        return composeMatrices.apply(void 0, [matrix].concat(restMatrices));\n      }\n  }\n}","map":null,"metadata":{},"sourceType":"module"}