{"ast":null,"code":"import * as types from \"../constants\";\nimport taskApi from '../api/taskApi';\nexport function projectTasks(project_id) {\n  return function (dispatch) {\n    return taskApi.getProjectTasks(project_id).then(tasks => {\n      dispatch({\n        type: types.GET_PROJECT_TASKS,\n        payload: tasks\n      });\n    }).catch(error => {\n      throw error;\n    });\n  };\n}\nexport function addTaskToParent(client_plan_params, subdomain) {\n  return function (dispatch) {\n    taskApi.addTask(client_plan_params, subdomain).then(plan => {\n      dispatch({\n        type: types.ADD_TASK,\n        payload: plan\n      });\n    }).catch(error => {\n      throw error;\n    });\n  };\n}","map":{"version":3,"sources":["/Users/johnvehr/Builder/kuuik/octoe_web/src/redux/actions/taskActions.js"],"names":["types","taskApi","projectTasks","project_id","dispatch","getProjectTasks","then","tasks","type","GET_PROJECT_TASKS","payload","catch","error","addTaskToParent","client_plan_params","subdomain","addTask","plan","ADD_TASK"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,cAAvB;AACA,OAAOC,OAAP,MAAoB,gBAApB;AAEA,OAAO,SAASC,YAAT,CAAsBC,UAAtB,EAAiC;AACtC,SAAO,UAASC,QAAT,EAAkB;AACvB,WAAOH,OAAO,CAACI,eAAR,CAAwBF,UAAxB,EAAoCG,IAApC,CAAyCC,KAAK,IAAI;AACvDH,MAAAA,QAAQ,CAAC;AACPI,QAAAA,IAAI,EAAER,KAAK,CAACS,iBADL;AAEPC,QAAAA,OAAO,EAAEH;AAFF,OAAD,CAAR;AAID,KALM,EAKJI,KALI,CAKEC,KAAK,IAAI;AAChB,YAAMA,KAAN;AACD,KAPM,CAAP;AAQD,GATD;AAUD;AAED,OAAO,SAASC,eAAT,CAAyBC,kBAAzB,EAA4CC,SAA5C,EAAsD;AAC3D,SAAO,UAASX,QAAT,EAAkB;AACvBH,IAAAA,OAAO,CAACe,OAAR,CAAgBF,kBAAhB,EAAmCC,SAAnC,EAA8CT,IAA9C,CAAmDW,IAAI,IAAI;AACzDb,MAAAA,QAAQ,CAAC;AACPI,QAAAA,IAAI,EAAER,KAAK,CAACkB,QADL;AAEPR,QAAAA,OAAO,EAAEO;AAFF,OAAD,CAAR;AAID,KALD,EAKGN,KALH,CAKSC,KAAK,IAAI;AAChB,YAAMA,KAAN;AACD,KAPD;AAQD,GATD;AAUD","sourcesContent":["import * as types from \"../constants\";\nimport taskApi from '../api/taskApi'\n\nexport function projectTasks(project_id){\n  return function(dispatch){\n    return taskApi.getProjectTasks(project_id).then(tasks => {\n      dispatch({\n        type: types.GET_PROJECT_TASKS,\n        payload: tasks\n      })\n    }).catch(error => {\n      throw(error)\n    })\n  }\n}\n\nexport function addTaskToParent(client_plan_params,subdomain){\n  return function(dispatch){\n    taskApi.addTask(client_plan_params,subdomain).then(plan => {\n      dispatch({\n        type: types.ADD_TASK,\n        payload: plan\n      })\n    }).catch(error => {\n      throw(error)\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}