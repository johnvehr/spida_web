{"ast":null,"code":"import _objectSpread from \"/Users/johnvehr/Builder/kuuik/octoe_web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport * as types from \"../constants\";\nconst initialState = {\n  tasks: [],\n  task: {},\n  fetched_tasks: false\n};\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    case types.REMOVE_FETCHED_TASKS:\n      return _objectSpread({}, state, {\n        fetched_tasks: false\n      });\n      break;\n\n    case types.GET_PROJECT_TASKS:\n      return _objectSpread({}, state, {\n        tasks: action.payload,\n        fetched_tasks: true\n      });\n\n    case types.ADD_TASK:\n      return _objectSpread({}, state, {\n        tasks: action.payload.tasks,\n        task: action.payload.task\n      });\n      {\n        /*\n           const new_payload = {\n             ...action.payload,\n             children: []\n           }\n              if(action.payload.ancestry != null){\n               const parent_count = action.payload.ancestry.split('/').length - 1\n               const parent = action.payload.ancestry.split('/')[parent_count]\n               const findMyChild = (arr) => {\n                 arr.map(a => {\n                   const new_a = {...a}\n                   if(new_a.id == parent){\n                     return new_a.children.push(new_payload)\n                   }\n                   if(new_a['children']) findMyChild(new_a['children'])\n                  })\n                 return arr\n               }\n                return {\n                 ...state,\n                 tasks: {\n                   ...state.tasks,\n                   children: findMyChild([...state.tasks.children])\n                  }\n               }\n             }else {\n               return {\n                 ...state,\n                 tasks: {\n                   ...state.tasks,\n                   children: [\n                     ...state.tasks.children,\n                     new_payload\n                   ]\n                 }\n               }\n             }\n             break;\n             */\n      }\n      break;\n\n    case types.DELETE_TASK:\n      return _objectSpread({}, state, {\n        tasks: action.payload.tasks\n      });\n      break;\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/johnvehr/Builder/kuuik/octoe_web/src/redux/reducers/taskReducer.js"],"names":["types","initialState","tasks","task","fetched_tasks","state","action","type","REMOVE_FETCHED_TASKS","GET_PROJECT_TASKS","payload","ADD_TASK","DELETE_TASK"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,cAAvB;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,EADY;AAEnBC,EAAAA,IAAI,EAAE,EAFa;AAGnBC,EAAAA,aAAa,EAAE;AAHI,CAArB;AAMA,eAAe,UAASC,KAAK,GAAGJ,YAAjB,EAA8BK,MAA9B,EAAqC;AAClD,UAAOA,MAAM,CAACC,IAAd;AACE,SAAKP,KAAK,CAACQ,oBAAX;AACA,+BACKH,KADL;AAEED,QAAAA,aAAa,EAAE;AAFjB;AAIA;;AACA,SAAKJ,KAAK,CAACS,iBAAX;AACE,+BACKJ,KADL;AAEEH,QAAAA,KAAK,EAAEI,MAAM,CAACI,OAFhB;AAGEN,QAAAA,aAAa,EAAE;AAHjB;;AAKF,SAAKJ,KAAK,CAACW,QAAX;AACA,+BACKN,KADL;AAEEH,QAAAA,KAAK,EAAEI,MAAM,CAACI,OAAP,CAAeR,KAFxB;AAGEC,QAAAA,IAAI,EAAEG,MAAM,CAACI,OAAP,CAAeP;AAHvB;AAKJ;AAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0CQ;AACL;;AACA,SAAMH,KAAK,CAACY,WAAZ;AACE,+BACKP,KADL;AAEEH,QAAAA,KAAK,EAAEI,MAAM,CAACI,OAAP,CAAeR;AAFxB;AAIF;;AAEA;AACE,aAAOG,KAAP;AAvEJ;AAyED","sourcesContent":["import * as types from \"../constants\";\n\nconst initialState = {\n  tasks: [],\n  task: {},\n  fetched_tasks: false\n}\n\nexport default function(state = initialState,action){\n  switch(action.type){\n    case types.REMOVE_FETCHED_TASKS:\n    return {\n      ...state,\n      fetched_tasks: false\n    }\n    break;\n    case types.GET_PROJECT_TASKS:\n      return {\n        ...state,\n        tasks: action.payload,\n        fetched_tasks: true\n      }\n    case types.ADD_TASK:\n    return {\n      ...state,\n      tasks: action.payload.tasks,\n      task: action.payload.task\n    }\n{/*\n    const new_payload = {\n      ...action.payload,\n      children: []\n    }\n\n      if(action.payload.ancestry != null){\n        const parent_count = action.payload.ancestry.split('/').length - 1\n        const parent = action.payload.ancestry.split('/')[parent_count]\n        const findMyChild = (arr) => {\n          arr.map(a => {\n            const new_a = {...a}\n            if(new_a.id == parent){\n              return new_a.children.push(new_payload)\n            }\n            if(new_a['children']) findMyChild(new_a['children'])\n\n          })\n          return arr\n        }\n\n        return {\n          ...state,\n          tasks: {\n            ...state.tasks,\n            children: findMyChild([...state.tasks.children])\n\n          }\n        }\n      }else {\n        return {\n          ...state,\n          tasks: {\n            ...state.tasks,\n            children: [\n              ...state.tasks.children,\n              new_payload\n            ]\n          }\n        }\n      }\n      break;\n      */}\n    break;\n    case  types.DELETE_TASK:\n      return {\n        ...state,\n        tasks: action.payload.tasks\n      }\n    break;\n\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}