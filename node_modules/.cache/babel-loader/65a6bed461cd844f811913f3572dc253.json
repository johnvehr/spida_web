{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React from 'react';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport { radialLine } from 'd3-shape';\nLineRadial.propTypes = {\n  className: PropTypes.string,\n  children: PropTypes.func,\n  curve: PropTypes.func,\n  data: PropTypes.any,\n  defined: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),\n  fill: PropTypes.string,\n  angle: PropTypes.oneOfType([PropTypes.func, PropTypes.number]),\n  radius: PropTypes.oneOfType([PropTypes.func, PropTypes.number]),\n  innerRef: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n};\nexport default function LineRadial(_ref) {\n  var className = _ref.className,\n      angle = _ref.angle,\n      radius = _ref.radius,\n      defined = _ref.defined,\n      curve = _ref.curve,\n      data = _ref.data,\n      innerRef = _ref.innerRef,\n      children = _ref.children,\n      _ref$fill = _ref.fill,\n      fill = _ref$fill === void 0 ? 'transparent' : _ref$fill,\n      restProps = _objectWithoutPropertiesLoose(_ref, [\"className\", \"angle\", \"radius\", \"defined\", \"curve\", \"data\", \"innerRef\", \"children\", \"fill\"]);\n\n  var path = radialLine();\n  if (angle) path.angle(angle);\n  if (radius) path.radius(radius);\n  if (defined) path.defined(defined);\n  if (curve) path.curve(curve);\n  if (children) return children({\n    path: path\n  });\n  return React.createElement(\"path\", _extends({\n    ref: innerRef,\n    className: cx('vx-line-radial', className),\n    d: path(data),\n    fill: fill\n  }, restProps));\n}","map":null,"metadata":{},"sourceType":"module"}