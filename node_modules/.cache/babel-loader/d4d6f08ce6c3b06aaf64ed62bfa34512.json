{"ast":null,"code":"import * as types from \"../constants\";\nimport projectApi from '../api/projectApi';\n/*\nresource, param_line, type, obj={}\n*/\n\nexport function projects(subdomain) {\n  return function (dispatch) {\n    return projectApi.projectEndpoint(projectApi.project_resources, `?subdomain=${subdomain}`, 'GET').then(project => {\n      dispatch({\n        type: types.REMOVE_FETCHED_TASKS,\n        payload: 'remove'\n      });\n      dispatch({\n        type: types.GET_PROJECTS,\n        payload: project\n      });\n    }).catch(error => {\n      throw error;\n    });\n    /*  .catch(error => {dispatch({\n        type: types.GET_PROJECTS_FAIL,\n        payload: error\n      })})*/\n  };\n}\nexport function createProject(project, subdomain) {\n  return function (dispatch) {\n    return projectApi.projectEndpoint('projects', `?subdomain=${subdomain}`, 'POST', project).then(responseProject => {\n      dispatch({\n        type: types.CREATE_PROJECT,\n        payload: responseProject\n      });\n    }).catch(error => {\n      throw error;\n    });\n  };\n}\nexport function retrieveProject(id, subdomain) {\n  return function (dispatch) {\n    return projectApi.projectEndpoint('projects', `${id.id}?subdomain=${subdomain}`, 'GET').then(responseProject => {\n      dispatch({\n        type: types.PROJECT_DETAIL,\n        payload: responseProject\n      });\n    }).catch(error => {\n      throw error;\n    });\n  };\n}\nexport function deleteProject(project) {\n  return function (dispatch) {\n    return projectApi.deleteProject(project).then(responseProject => {\n      dispatch({\n        type: types.DELETE_PROJECT,\n        payload: responseProject\n      });\n    }).catch(error => {\n      throw error;\n    });\n  };\n}","map":{"version":3,"sources":["/Users/johnvehr/Builder/kuuik/octoe_web/src/redux/actions/projectActions.js"],"names":["types","projectApi","projects","subdomain","dispatch","projectEndpoint","project_resources","then","project","type","REMOVE_FETCHED_TASKS","payload","GET_PROJECTS","catch","error","createProject","responseProject","CREATE_PROJECT","retrieveProject","id","PROJECT_DETAIL","deleteProject","DELETE_PROJECT"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,cAAvB;AACA,OAAOC,UAAP,MAAuB,mBAAvB;AAEA;;;;AAIA,OAAO,SAASC,QAAT,CAAkBC,SAAlB,EAA4B;AACjC,SAAO,UAASC,QAAT,EAAkB;AACvB,WAAOH,UAAU,CAACI,eAAX,CAA2BJ,UAAU,CAACK,iBAAtC,EAAyD,cAAaH,SAAU,EAAhF,EAAmF,KAAnF,EACNI,IADM,CACDC,OAAO,IAAG;AACdJ,MAAAA,QAAQ,CAAC;AACPK,QAAAA,IAAI,EAAET,KAAK,CAACU,oBADL;AAEPC,QAAAA,OAAO,EAAE;AAFF,OAAD,CAAR;AAIAP,MAAAA,QAAQ,CAAC;AACPK,QAAAA,IAAI,EAAET,KAAK,CAACY,YADL;AAEPD,QAAAA,OAAO,EAAEH;AAFF,OAAD,CAAR;AAID,KAVM,EAWNK,KAXM,CAWAC,KAAK,IAAI;AACd,YAAMA,KAAN;AACD,KAbM,CAAP;AAcF;;;;AAIC,GAnBD;AAoBD;AAED,OAAO,SAASC,aAAT,CAAuBP,OAAvB,EAA+BL,SAA/B,EAAyC;AAC9C,SAAO,UAASC,QAAT,EAAkB;AACvB,WAAOH,UAAU,CAACI,eAAX,CAA2B,UAA3B,EAAuC,cAAaF,SAAU,EAA9D,EAAiE,MAAjE,EAAyEK,OAAzE,EAAkFD,IAAlF,CAAuFS,eAAe,IAAI;AAC/GZ,MAAAA,QAAQ,CAAC;AACPK,QAAAA,IAAI,EAAET,KAAK,CAACiB,cADL;AAEPN,QAAAA,OAAO,EAAEK;AAFF,OAAD,CAAR;AAID,KALM,EAKJH,KALI,CAKEC,KAAK,IAAI;AAChB,YAAMA,KAAN;AACD,KAPM,CAAP;AAQD,GATD;AAUD;AAED,OAAO,SAASI,eAAT,CAAyBC,EAAzB,EAA4BhB,SAA5B,EAAsC;AAC3C,SAAO,UAASC,QAAT,EAAkB;AACvB,WAAOH,UAAU,CAACI,eAAX,CAA2B,UAA3B,EAAuC,GAAEc,EAAE,CAACA,EAAG,cAAahB,SAAU,EAAtE,EAAwE,KAAxE,EAA+EI,IAA/E,CAAoFS,eAAe,IAAI;AAC5GZ,MAAAA,QAAQ,CAAC;AACPK,QAAAA,IAAI,EAAET,KAAK,CAACoB,cADL;AAEPT,QAAAA,OAAO,EAAEK;AAFF,OAAD,CAAR;AAID,KALM,EAMNH,KANM,CAMAC,KAAK,IAAI;AACd,YAAMA,KAAN;AACD,KARM,CAAP;AASD,GAVD;AAWD;AAED,OAAO,SAASO,aAAT,CAAuBb,OAAvB,EAA+B;AACpC,SAAO,UAASJ,QAAT,EAAkB;AACvB,WAAOH,UAAU,CAACoB,aAAX,CAAyBb,OAAzB,EAAkCD,IAAlC,CAAuCS,eAAe,IAAI;AAC/DZ,MAAAA,QAAQ,CAAC;AACPK,QAAAA,IAAI,EAAET,KAAK,CAACsB,cADL;AAEPX,QAAAA,OAAO,EAAEK;AAFF,OAAD,CAAR;AAID,KALM,EAKJH,KALI,CAKEC,KAAK,IAAI;AAChB,YAAMA,KAAN;AACD,KAPM,CAAP;AAQD,GATD;AAUD","sourcesContent":["import * as types from \"../constants\";\nimport projectApi from '../api/projectApi'\n\n/*\nresource, param_line, type, obj={}\n*/\n\nexport function projects(subdomain){\n  return function(dispatch){\n    return projectApi.projectEndpoint(projectApi.project_resources,`?subdomain=${subdomain}`, 'GET')\n    .then(project =>{\n      dispatch({\n        type: types.REMOVE_FETCHED_TASKS,\n        payload: 'remove'\n      })\n      dispatch({\n        type: types.GET_PROJECTS,\n        payload: project\n      })\n    })\n    .catch(error => {\n      throw(error)\n    })\n  /*  .catch(error => {dispatch({\n      type: types.GET_PROJECTS_FAIL,\n      payload: error\n    })})*/\n  }\n}\n\nexport function createProject(project,subdomain){\n  return function(dispatch){\n    return projectApi.projectEndpoint('projects',`?subdomain=${subdomain}`, 'POST', project).then(responseProject => {\n      dispatch({\n        type: types.CREATE_PROJECT,\n        payload: responseProject\n      })\n    }).catch(error => {\n      throw(error)\n    })\n  }\n}\n\nexport function retrieveProject(id,subdomain){\n  return function(dispatch){\n    return projectApi.projectEndpoint('projects',`${id.id}?subdomain=${subdomain}`,'GET').then(responseProject => {\n      dispatch({\n        type: types.PROJECT_DETAIL,\n        payload: responseProject\n      })\n    })\n    .catch(error => {\n      throw(error)\n    })\n  }\n}\n\nexport function deleteProject(project){\n  return function(dispatch){\n    return projectApi.deleteProject(project).then(responseProject => {\n      dispatch({\n        type: types.DELETE_PROJECT,\n        payload: responseProject\n      })\n    }).catch(error => {\n      throw(error)\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}