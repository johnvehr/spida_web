{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React from 'react';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport Stack from './Stack';\nAreaStack.propTypes = {\n  className: PropTypes.string,\n  top: PropTypes.number,\n  left: PropTypes.number,\n  keys: PropTypes.array,\n  data: PropTypes.array,\n  curve: PropTypes.func,\n  color: PropTypes.func,\n  children: PropTypes.func,\n  x: PropTypes.oneOfType([PropTypes.func, PropTypes.number]),\n  x0: PropTypes.oneOfType([PropTypes.func, PropTypes.number]),\n  x1: PropTypes.oneOfType([PropTypes.func, PropTypes.number]),\n  y: PropTypes.oneOfType([PropTypes.func, PropTypes.number]),\n  y0: PropTypes.oneOfType([PropTypes.func, PropTypes.number]),\n  y1: PropTypes.oneOfType([PropTypes.func, PropTypes.number]),\n  value: PropTypes.oneOfType([PropTypes.func, PropTypes.number]),\n  defined: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),\n  order: PropTypes.oneOfType([PropTypes.func, PropTypes.array, PropTypes.string]),\n  offset: PropTypes.oneOfType([PropTypes.func, PropTypes.array, PropTypes.string])\n};\nexport default function AreaStack(_ref) {\n  var className = _ref.className,\n      top = _ref.top,\n      left = _ref.left,\n      keys = _ref.keys,\n      data = _ref.data,\n      curve = _ref.curve,\n      defined = _ref.defined,\n      x = _ref.x,\n      x0 = _ref.x0,\n      x1 = _ref.x1,\n      y0 = _ref.y0,\n      y1 = _ref.y1,\n      value = _ref.value,\n      order = _ref.order,\n      offset = _ref.offset,\n      color = _ref.color,\n      children = _ref.children,\n      restProps = _objectWithoutPropertiesLoose(_ref, [\"className\", \"top\", \"left\", \"keys\", \"data\", \"curve\", \"defined\", \"x\", \"x0\", \"x1\", \"y0\", \"y1\", \"value\", \"order\", \"offset\", \"color\", \"children\"]);\n\n  return React.createElement(Stack, _extends({\n    className: className,\n    top: top,\n    left: left,\n    keys: keys,\n    data: data,\n    curve: curve,\n    defined: defined,\n    x: x,\n    x0: x0,\n    x1: x1,\n    y0: y0,\n    y1: y1,\n    value: value,\n    order: order,\n    offset: offset,\n    color: color\n  }, restProps), children || function (_ref2) {\n    var stacks = _ref2.stacks,\n        path = _ref2.path;\n    return stacks.map(function (series, i) {\n      return React.createElement(\"path\", _extends({\n        className: cx('vx-area-stack', className),\n        key: \"area-stack-\" + i + \"-\" + (series.key || ''),\n        d: path(series),\n        fill: color(series.key, i)\n      }, restProps));\n    });\n  });\n}","map":null,"metadata":{},"sourceType":"module"}