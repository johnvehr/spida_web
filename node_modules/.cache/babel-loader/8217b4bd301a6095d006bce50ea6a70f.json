{"ast":null,"code":"import * as types from \"../constants\";\nimport userApi from '../api/userApi';\nexport function signUp(usr, callbackRedirect) {\n  return function (dispatch) {\n    return userApi.signupUser(usr).then(user => {\n      dispatch({\n        type: types.SIGN_UP,\n        payload: user\n      });\n    }).then(user => callbackRedirect(user)).catch(error => {\n      throw error;\n    });\n  };\n}\nexport function signOut() {\n  return function (dispatch) {\n    return userApi.signOutUser().then(user => {\n      dispatch({\n        type: types.SIGN_OUT,\n        payload: user\n      });\n    }).catch(error => {\n      throw error;\n    });\n  };\n}\nexport function signIn(user) {\n  return function (dispatch) {\n    return userApi.signInUser(user).then(usr => {\n      dispatch({\n        type: types.SIGN_IN,\n        payload: usr\n      });\n    }).catch(error => {\n      throw error;\n    });\n  };\n}\nexport function retrieveUserAccount(subdomain) {\n  return function (dispatch) {\n    return userApi.retrieveAccount(subdomain).then(user => {\n      dispatch({\n        type: types.RETRIEVE_USER_ACCOUNT,\n        payload: user\n      });\n    }).catch(error => {\n      throw error;\n    });\n  };\n}","map":{"version":3,"sources":["/Users/johnvehr/Builder/kuuik/octoe_web/src/redux/actions/userActions.js"],"names":["types","userApi","signUp","usr","callbackRedirect","dispatch","signupUser","then","user","type","SIGN_UP","payload","catch","error","signOut","signOutUser","SIGN_OUT","signIn","signInUser","SIGN_IN","retrieveUserAccount","subdomain","retrieveAccount","RETRIEVE_USER_ACCOUNT"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,cAAvB;AAEA,OAAOC,OAAP,MAAoB,gBAApB;AAEA,OAAO,SAASC,MAAT,CAAgBC,GAAhB,EAAoBC,gBAApB,EAAqC;AAC1C,SAAO,UAASC,QAAT,EAAkB;AACvB,WAAOJ,OAAO,CAACK,UAAR,CAAmBH,GAAnB,EAAwBI,IAAxB,CAA6BC,IAAI,IAAI;AAC1CH,MAAAA,QAAQ,CAAC;AACPI,QAAAA,IAAI,EAAET,KAAK,CAACU,OADL;AAEPC,QAAAA,OAAO,EAAEH;AAFF,OAAD,CAAR;AAID,KALM,EAMND,IANM,CAMDC,IAAI,IAAIJ,gBAAgB,CAACI,IAAD,CANvB,EAONI,KAPM,CAOAC,KAAK,IAAI;AACd,YAAMA,KAAN;AACD,KATM,CAAP;AAUD,GAXD;AAYD;AAED,OAAO,SAASC,OAAT,GAAkB;AACvB,SAAO,UAAST,QAAT,EAAkB;AACvB,WAAOJ,OAAO,CAACc,WAAR,GAAsBR,IAAtB,CAA2BC,IAAI,IAAI;AACxCH,MAAAA,QAAQ,CAAC;AACPI,QAAAA,IAAI,EAAET,KAAK,CAACgB,QADL;AAEPL,QAAAA,OAAO,EAAEH;AAFF,OAAD,CAAR;AAID,KALM,EAMNI,KANM,CAMAC,KAAK,IAAI;AACd,YAAMA,KAAN;AACD,KARM,CAAP;AASD,GAVD;AAWD;AAED,OAAO,SAASI,MAAT,CAAgBT,IAAhB,EAAqB;AAC1B,SAAO,UAASH,QAAT,EAAkB;AACvB,WAAOJ,OAAO,CAACiB,UAAR,CAAmBV,IAAnB,EAAyBD,IAAzB,CAA8BJ,GAAG,IAAI;AAC1CE,MAAAA,QAAQ,CAAC;AACPI,QAAAA,IAAI,EAAET,KAAK,CAACmB,OADL;AAEPR,QAAAA,OAAO,EAAER;AAFF,OAAD,CAAR;AAID,KALM,EAMNS,KANM,CAMAC,KAAK,IAAI;AACd,YAAMA,KAAN;AACD,KARM,CAAP;AASD,GAVD;AAWD;AAED,OAAO,SAASO,mBAAT,CAA6BC,SAA7B,EAAuC;AAC5C,SAAO,UAAShB,QAAT,EAAkB;AACvB,WAAOJ,OAAO,CAACqB,eAAR,CAAwBD,SAAxB,EAAmCd,IAAnC,CAAwCC,IAAI,IAAI;AACrDH,MAAAA,QAAQ,CAAC;AACPI,QAAAA,IAAI,EAAET,KAAK,CAACuB,qBADL;AAEPZ,QAAAA,OAAO,EAAEH;AAFF,OAAD,CAAR;AAID,KALM,EAKJI,KALI,CAKEC,KAAK,IAAI;AAChB,YAAMA,KAAN;AACD,KAPM,CAAP;AAQD,GATD;AAUD","sourcesContent":["import * as types from \"../constants\";\n\nimport userApi from '../api/userApi'\n\nexport function signUp(usr,callbackRedirect){\n  return function(dispatch){\n    return userApi.signupUser(usr).then(user => {\n      dispatch({\n        type: types.SIGN_UP,\n        payload: user\n      })\n    })\n    .then(user => callbackRedirect(user))\n    .catch(error => {\n      throw(error)\n    })\n  }\n}\n\nexport function signOut(){\n  return function(dispatch){\n    return userApi.signOutUser().then(user => {\n      dispatch({\n        type: types.SIGN_OUT,\n        payload: user\n      })\n    })\n    .catch(error => {\n      throw(error)\n    })\n  }\n}\n\nexport function signIn(user){\n  return function(dispatch){\n    return userApi.signInUser(user).then(usr => {\n      dispatch({\n        type: types.SIGN_IN,\n        payload: usr\n      })\n    })\n    .catch(error => {\n      throw(error)\n    })\n  }\n}\n\nexport function retrieveUserAccount(subdomain){\n  return function(dispatch){\n    return userApi.retrieveAccount(subdomain).then(user => {\n      dispatch({\n        type: types.RETRIEVE_USER_ACCOUNT,\n        payload: user\n      })\n    }).catch(error => {\n      throw(error)\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}